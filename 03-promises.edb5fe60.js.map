{"mappings":"YAAA,IAAMA,EAAO,CACXC,WAAYC,SAASC,cAAe,uBACpCC,UAAWF,SAASC,cAAe,sBACnCE,OAAQH,SAASC,cAAe,wBAChCG,UAAWJ,SAASC,cAAe,WAErCI,QAAQC,IAAIR,GACZ,IAAMS,EAAYT,EAAKK,OAAOK,MAC9BH,QAAQC,IAAIC,GAEZ,IAAME,EAAQX,EAAKC,WAAWS,MA2B9B,SAASE,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAQtC,OAPgB,IAAIC,SAAQ,SAACC,EAAKC,GAC5BL,EACAI,EAAIN,GAEJO,EAAIP,E,IAhCZN,QAAQC,IAAIG,GAEZX,EAAKM,UAAUe,iBAAkB,UASjC,SAAiBC,GACfA,EAAIC,iBACJ,KAAa,GAAQC,OAAOf,GAAf,EAAgC,CAE3CG,EADiB,EACOD,GACvBc,MAAK,SAAAC,G,IAAGb,EAAQa,EAARb,SAAUc,EAAKD,EAALZ,MACjBP,QAAQC,IAAI,uBAAwCoB,OAAff,EAAS,QAAYe,OAAND,EAAM,M,IAE3DE,OAAM,SAAAH,G,IAAGb,EAAQa,EAARb,SAAUiB,EAAKJ,EAALZ,MAClBP,QAAQC,IAAI,sBAAuCoB,OAAff,EAAS,QAAYe,OAANE,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["const refs = {\n  firstDelay: document.querySelector(`input[name='delay']`),\n  delayStep: document.querySelector(`input[name='step']`),\n  amount: document.querySelector(`input[name='amount']`),\n  createBtn: document.querySelector(`button`),\n}\nconsole.log(refs);\nconst amountSum = refs.amount.value;\nconsole.log(amountSum)\n\nconst delay = refs.firstDelay.value;\nconsole.log(delay)\n\nrefs.createBtn.addEventListener(`submit`, onStart);\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію \n// createPromise(position, delay) стільки разів, скільки ввели \n// в поле amount. Під час кожного виклику передай їй номер промісу (position), \n// що створюється, і затримку, враховуючи першу затримку (delay), \n// введену користувачем, і крок (step).\n// const amountSum = refs.amount.\n\nfunction onStart(evt) {\n  evt.preventDefault();\n  for (let i = 0; i <= Number(amountSum); i+1) {\n    const position = +i;\n    createPromise(position, delay)\n    .then(({ position, delay }) => {\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n}\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((res, rej) =>{\n    if (shouldResolve) {\n        res(position)\n      } else {\n        rej(position)\n      }\n  })\n  return promise\n \n}\n\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });"],"names":["$ce04d3a99e08e73b$var$refs","firstDelay","document","querySelector","delayStep","amount","createBtn","console","log","$ce04d3a99e08e73b$var$amountSum","value","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","res","rej","addEventListener","evt","preventDefault","Number","then","param","delay1","concat","catch","delay2"],"version":3,"file":"03-promises.edb5fe60.js.map"}