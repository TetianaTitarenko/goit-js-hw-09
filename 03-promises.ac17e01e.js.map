{"mappings":"AAAA,MAAMA,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,OAAQH,SAASC,cAAc,wBAC/BG,UAAWJ,SAASC,cAAc,WAEpCI,QAAQC,IAAIR,GACZ,MAAMS,EAAYT,EAAKK,OAAOK,MAC9BH,QAAQC,IAAIC,GAEZ,MAAME,EAAQX,EAAKC,WAAWS,MA2B9B,SAASE,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAQtC,OAPgB,IAAIC,SAAQ,CAACC,EAAKC,KAC5BL,EACAI,EAAIN,GAEJO,EAAIP,EAAS,G,CAhCrBN,QAAQC,IAAIG,GAEZX,EAAKM,UAAUe,iBAAiB,UAShC,SAAiBC,GACfA,EAAIC,iBACJ,IAAK,IAAIC,EAAI,EAAGA,GAAKC,OAAOhB,GAAYe,EAAK,CAE3CZ,GADkBY,EACMb,GACvBe,MAAK,EAACb,SAAEA,EAAUC,MAAAa,MACjBpB,QAAQC,IAAI,uBAAqBK,QAAiBc,MAAU,IAE7DC,OAAM,EAACf,SAAEA,EAAUC,MAAAe,MAClBtB,QAAQC,IAAI,sBAAoBK,QAAiBgB,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["const refs = {\n  firstDelay: document.querySelector(`input[name='delay']`),\n  delayStep: document.querySelector(`input[name='step']`),\n  amount: document.querySelector(`input[name='amount']`),\n  createBtn: document.querySelector(`button`),\n}\nconsole.log(refs);\nconst amountSum = refs.amount.value;\nconsole.log(amountSum)\n\nconst delay = refs.firstDelay.value;\nconsole.log(delay)\n\nrefs.createBtn.addEventListener(`submit`, onStart);\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію \n// createPromise(position, delay) стільки разів, скільки ввели \n// в поле amount. Під час кожного виклику передай їй номер промісу (position), \n// що створюється, і затримку, враховуючи першу затримку (delay), \n// введену користувачем, і крок (step).\n// const amountSum = refs.amount.\n\nfunction onStart(evt) {\n  evt.preventDefault();\n  for (let i = 0; i <= Number(amountSum); i+1) {\n    const position = +i;\n    createPromise(position, delay)\n    .then(({ position, delay }) => {\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n}\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((res, rej) =>{\n    if (shouldResolve) {\n        res(position)\n      } else {\n        rej(position)\n      }\n  })\n  return promise\n \n}\n\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });"],"names":["$47d4ff9957288465$var$refs","firstDelay","document","querySelector","delayStep","amount","createBtn","console","log","$47d4ff9957288465$var$amountSum","value","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","res","rej","addEventListener","evt","preventDefault","i","Number","then","delay1","catch","delay2"],"version":3,"file":"03-promises.ac17e01e.js.map"}